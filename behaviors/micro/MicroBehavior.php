<?php
/**
 * Created by PhpStorm.
 * User: quangthinh
 * Date: 5/15/18
 * Time: 7:58 PM
 */

namespace app\behaviors\micro;

use app\behaviors\micro\UrlManager;
use yii\base\Behavior;

/**
 * Class MicroBehavior
 * @package app\behaviors
 *
 * @property UrlManager $owner
 */
class MicroBehavior extends Behavior
{
    private static $methods = ['any', 'get', 'post', 'put', 'patch', 'options', 'delete', 'head'];

    private $callbacks = [];

    public $microControllerId = 'micro';
    private static $generateId = 0;

    public function getCallback($id)
    {
        return isset($this->callbacks[$id]) ? $this->callbacks[$id] : null;
    }

    protected function match($method, $pattern, $route, $name = null, $append = true)
    {
        if (is_string($method)) {
            $method = [$method];
        }

        // unique
        $method = array_keys(array_combine($method, $method));

        if (!empty($method)) {
            $pattern = implode(',', $method) . ' ' . $pattern;
        }

        if (is_string($route)) {
            $this->owner->addRules([
                $pattern => $route,
            ], $append);

            return;
        }

        if ($route instanceof \Closure) {
            if (empty($name)) {
                $name = 'micro' . self::$generateId++;
            }

            $this->callbacks[$name] = $route;

            $this->owner->addRules([
                $pattern => $this->microControllerId . '/' . $name,
            ]);
            return;
        }

        $this->owner->addRules([
            $pattern => $route,
        ], $append);
    }

    /**
     * @param string $name
     * @param array $params
     * @return mixed
     */
    public function __call($name, $params)
    {
        if (in_array(strtolower($name), self::$methods)) {
            array_unshift($params, [strtoupper($name)]);
            return call_user_func_array([$this, 'match'], $params);
        }

        parent::__call($name, $params); // TODO: Change the autogenerated stub
    }

    public function hasMethod($name)
    {
        // lie Yii2 =))
        if (in_array(strtolower($name), self::$methods)) {
            return true;
        }

        return parent::hasMethod($name); // TODO: Change the autogenerated stub
    }
}